name: Build and push a Docker image to ECR

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: string
        default: "us-east-1"
      DOCKER_BUILD_ARGS:
        required: false
        type: string
        default: "--progress plain --file Dockerfile"
      DOCKERFILE_FOLDER:
        required: false
        type: string
        default: '.'
      DOCKERFILE_NAME:
        required: false
        type: string
        default: 'Dockerfile'

    outputs:
      image_tag:
        description: Image tag created on the workflow
        value: ${{ jobs.build_n_push.outputs.image_tag }}
      latest_tag:
        description: Latest tag created on the workflow
        value: ${{ jobs.build_n_push.outputs.latest_tag }}

jobs:
  check_org:
    name: Check Caller
    runs-on: ubuntu-latest

    steps:
      - name: Check the calling organization
        if: ${{ github.repository_owner != 'trafilea' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('This reusable workflow can only be used by Trafilea.')


  build_n_push:
    needs: check_org
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
      latest_tag: ${{ steps.set-latest-tag.outputs.latest_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Image tag
        id: set-image-tag
        shell: bash
        run: |
          echo "image_tag=$(echo ${{ github.sha }} | cut -c1-12)" >> $GITHUB_OUTPUT

      - name: Set LATEST tag
        id: set-latest-tag
        shell: bash
        run: |
          if [ ${{ github.ref }}  == 'refs/heads/develop' ]; then echo "latest_tag=latest" >> $GITHUB_OUTPUT; else echo "latest_tag=latest-staging" >> $GITHUB_OUTPUT; fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE }}
          aws-region: "${{ inputs.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: login-container-registry
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Container Image
        id: build-container-image
        env:
          ECR_REGISTRY: ${{ steps.login-container-registry.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.APP_NAME }}
          DOCKERFILE_FOLDER: ${{ inputs.DOCKERFILE_FOLDER }}
        run: |
          cd $DOCKERFILE_FOLDER
          docker build . \
            ${{ inputs.DOCKER_BUILD_ARGS }} \
            --file ${{ inputs.DOCKERFILE_NAME }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }}
          docker tag \
            $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }} \
            $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-latest-tag.outputs.latest_tag }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-latest-tag.outputs.latest_tag }}
