name: Build and push a Docker image to ECR

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: string
        default: "us-east-1"

    outputs:
      image_tag:
        description: Image tag created on the workflow
        value: ${{ jobs.build_n_push.outputs.image_tag }}
      latest_tag:
        description: Latest tag created on the workflow
        value: ${{ jobs.build_n_push.outputs.latest_tag }}

    secrets:
      OPS_AWS_ACCESS_KEY_ID:
        required: true
      OPS_AWS_SECRET_ACCESS_KEY:
        required: true
      GH_WORKFLOW_TOKEN:
        required: true


jobs:
  check_org:
    name: Check Caller
    runs-on: ubuntu-latest

    steps:
      - name: Check the calling organization
        if: ${{ github.repository_owner != 'jw-tera' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('This reusable workflow can only be used by Trafilea.')


  build_n_push:
    env:
      BUILD_CACHE: /home/runner/.docker/buildkit
    needs: check_org
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
      latest_tag: ${{ steps.set-latest-tag.outputs.latest_tag }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}

      - name: Set Image tag
        id: set-image-tag
        shell: bash
        run: |
          echo "::set-output name=image_tag::$(echo ${{ github.sha }} | cut -c1-12)"

      - name: Set LATEST tag
        id: set-latest-tag
        shell: bash
        run: |
          if [ ${{ github.ref }}  == 'refs/heads/develop' ]; then echo "::set-output name=latest_tag::latest"; else echo "::set-output name=latest_tag::latest-staging"; fi

      - name: Configure AWS Credentials
        id: configure-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.OPS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.OPS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-container-registry
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/cache@v1
        with:
          path: ${{ env.BUILD_CACHE }}
          key: ${{ hashFiles('Dockerfile') }}

      - name: Install the latest buildkit release
        run: |
          BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
            | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
          curl -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

      - name: Start buildkit daemon
        run: |
          sudo --non-interactive --shell <<END_SUDO
            install -d -m 0750 -o root -g docker /run/buildkit
            buildkitd &
            while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
            chgrp docker /run/buildkit/buildkitd.sock
          END_SUDO

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ steps.login-container-registry.outputs.registry }}/${{ inputs.APP_NAME }}
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.image_tag }}
        shell: bash
        run: |
          buildctl build \
            --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
            --export-cache type=local,dest=${BUILD_CACHE},mode=max,tag=${IMAGE_TAG} \
            --import-cache type=local,src=${BUILD_CACHE} \
            --output type=docker,name=${IMAGE_NAME} | docker load
          echo "Cache size: $(du -sh ${BUILD_CACHE})"

      - name: DEBUG - Output image name
        run: |
          docker image ls

      - name: Tag and Push Container Image
        id: build-container-image
        env:
          ECR_REGISTRY: ${{ steps.login-container-registry.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.APP_NAME }}
        run: |
          docker tag \
            $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }} \
            $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-latest-tag.outputs.latest_tag }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.image_tag }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-latest-tag.outputs.latest_tag }}
